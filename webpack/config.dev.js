const webpack = require('webpack');const AssetsPlugin = require('assets-webpack-plugin');const FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');const path = require('path');// const precss = require('precss');// const postcssImport = require('postcss-import');// const cssNext = require('postcss-cssnext');// const cssNested = require('postcss-nested');// const ExtractTextPlugin = require('extract-text-webpack-plugin');const { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');const client = {	context: path.resolve(__dirname, '../client'),	devtool: 'eval-source-map',	stats: {		colors: true,		children: false,		reasons: false,		chunks: false,		modules: false	},	entry: {		app: [			'babel-polyfill',			'react-hot-loader/patch',			'webpack-hot-middleware/client',			'./app.js'		],		vendor: ['react', 'react-dom', 'react-router-dom', 'redux', 'react-redux']	},	output: {		path: path.resolve(__dirname, '../dist'),		publicPath: '/',		filename: 'js/[name].js'	},	module: {		rules: [			{				test: /\.js?$/,				exclude: /(node_modules|bower_components)/,				use: {					loader: 'babel-loader',					options: {						presets: ['env', 'react']					}				}			},			// {			// 	test: /\.css$/,			// 	use: ExtractTextPlugin.extract({			// 		fallback: 'style-loader',			// 		use: [			// 			{			// 				loader: 'css-loader',			// 				options: {			// 					modules: true,			// 					localIndentName: '[name]__[local]__[hash:base64:5]'			// 				}			// 			},			// 			{			// 				loader: 'postcss-loader',			// 				options: {			// 					plugins: () => [			// 						precss,			// 						postcssImport({			// 							addDependencyTo: webpack			// 						}),			// 						cssNext({			// 							browsers: ['Chrome >= 31', 'Firefox >= 31', 'IE >= 9'],			// 							url: false			// 						}),			// 						cssNested			// 					]			// 				}			// 			}			// 		]			// 	})			// }		]	},	plugins: [		new AssetsPlugin({ path: path.resolve(__dirname, '../dist') }),		new webpack.optimize.CommonsChunkPlugin({			name: 'vendor',			minChunks: Infinity		}),		// new ExtractTextPlugin('css/app.css'),		// Setup enviorment variables for client		new webpack.EnvironmentPlugin({			NODE_ENV: JSON.stringify('development')		}),		// Setup global variables for client		new webpack.DefinePlugin({			__CLIENT__: true,			__SERVER__: false,			__DEV__: true		}),		new webpack.HotModuleReplacementPlugin(),		new webpack.NamedModulesPlugin(),		new webpack.NoEmitOnErrorsPlugin(),		new FriendlyErrorsWebpackPlugin()	]};const server = {	context: path.resolve(__dirname, '../server'),	devtool: 'eval-source-map',	stats: {		colors: true,		children: false,		reasons: false,		chunks: false,		modules: false	},	target: 'node',	entry: {		renderer: ['babel-polyfill', './renderer.js']	},	output: {		path: path.resolve(__dirname, '../server'),		publicPath: '/',		filename: 'SSR.js',		libraryTarget: 'commonjs2'	},	module: {		rules: [			{				test: /\.jsx?$/,				exclude: /(node_modules|bower_components)/,				use: {					loader: 'babel-loader',					options: {						presets: ['env', 'react']					}				}			},			{				test: /\.css$/,				use: [					{						loader: 'css-loader',						options: {							modules: true,							localIndentName: '[name]__[local]__[hash:base64:5]',							emit: false						}					}				]			}		]	},	plugins: [		// Setup enviorment variables for client		new webpack.EnvironmentPlugin({			NODE_ENV: JSON.stringify('development')		}),		// Setup global variables for client		new webpack.DefinePlugin({			__CLIENT__: false,			__SERVER__: true,			__DEV__: true		}),		new webpack.HotModuleReplacementPlugin(),		new webpack.NamedModulesPlugin()	]};if (process.env.NODE_ENV === 'inspect') {	client.plugins.push(new BundleAnalyzerPlugin());}module.exports = [client, server];