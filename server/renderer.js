import React from 'react';import ReactDOMServer from 'react-dom/server';import { StaticRouter } from 'react-router-dom';import { renderRoutes } from 'react-router-config';import { Provider } from 'react-redux';import serialize from 'serialize-javascript';import routes from '../shared/routes';import configureStore from '../shared/redux/store';import fetchData from '../server/utils/fetchData';const assets = require('../dist/webpack-assets.json');const render = ({ content, store}) => {	return ReactDOMServer.renderToNodeStream(		<html lang="en">			<head>				<meta charSet="UTF-8" />				<title>Client | Build awesome apps ... faster ⚡️</title>			</head>			<body>				<div id="app">{ content }</div>				<script dangerouslySetInnerHTML={ { __html: `window.__INITIAL_STATE__=${ serialize(store.getState()) };` } } charSet="UTF-8" />				{					Object						.keys(assets)						.reverse()						.map(key => <script key={ key } src={ assets[key].js } charSet="UTF-8" />)				}			</body>		</html>	);};const serverSideRenderer = async (ctx) => {	const store = configureStore();	const url = ctx.request.url;	ctx.type = 'html';	try {		// Load data from server-side first		await fetchData({ routes, store, url });		const context = {};		if (context.url) {			return ctx.redirect(context.url);		}		const content = (			<Provider store={store}>				<StaticRouter location={url} context={context}>					{renderRoutes(routes)}				</StaticRouter>			</Provider>		);		ctx.status = 200;		ctx.body = render({ content, store });	} catch (error) {		console.error(error);	}};export default serverSideRenderer;